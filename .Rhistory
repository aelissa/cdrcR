View(data)
if(data_list$GeographyLevel =="LSOA"){
geocode<-"LSOA11CD"
geocode_<-"lsoa11"
geocode__<-"LSOA11CD"
}
if(data_list$GeographyLevel =="OA"){
geocode<-"OA11CD"
geocode_<-"outputArea"
geocode__<-"outputArea"
}
if(data_list$GeographyLevel =="WZ"){
geocode<-"wz11cd"
geocode_<-"wzCode"
geocode__<-"workPlaceZone"
}
colName<-data %>%
dplyr::select(!ends_with("NM")) %>%
dplyr::select(contains(geocode)|contains(geocode_)|contains(geocode__)) %>% colnames()
data<-data %>%
dplyr::rename(!!geocode := colName)
View(data)
any(duplicated(dplyr::select(data,!!geocode)))
data %>% dplyr::distinct(!!geocode, .keep_all= TRUE)
length(unique(data$wz11cd))
d<-data %>% dplyr::distinct(!!geocode, .keep_all= TRUE)
d<-data[!duplicated(data$!!geocode),]
dplyr::distinct(data)
dplyr::distinct(data,wz11cd)
d<-dplyr::distinct(data,wz11cd,.keep_all = T)
d<-dplyr::distinct(data,geocode,.keep_all = T)
d<-dplyr::distinct(data,!!geocode,.keep_all = T)
d<-dplyr::distinct(data,wz11cd,.keep_all = T)
d<-dplyr::distinct(data,!! geocode,.keep_all = T)
d<-dplyr::distinct(data,!!! geocode,.keep_all = T)
?syms
d<-dplyr::distinct(data,rlang::syms(geocode),.keep_all = T)
d<-dplyr::distinct(data,wz11cd,.keep_all = T)
d<-dplyr::distinct(data,!! noquote(geocode),.keep_all = T)
View(d)
d<-dplyr::distinct(data,across(all_of(geocode)),.keep_all = T)
devtools::load_all()
cow<-getCDRC("COWZUK2011",geography = "LSOA", geographyCode = liverpool$LSOA11CD, boundaries = F)
cow<-getCDRC("COWZUK2011",geography = "LSOA", geographyCode = liverpool$LSOA11CD, boundaries = T)
devtools::load_all()
ahah<-getCDRC("AHAHOverallIndexDomain",geography = "postcode", geographyCode = c("L13AY","L82TJ","L83UL"))
loacInput<-getCDRC("LOACInputData2011",geography = "LSOA", geographyCode = "E01000001", boundaries = TRUE)
ahah[order(ahah$ahah)]
ahah[order(ahah$ahah)]["postCode"]
ahah[order(ahah$ahah)]["postCode","ahah"]
ahah[order(ahah$ahah),]
ahah[order(ahah$ahah),c("postCode","ahah")]
class(ahah)
devtools::load_all()
ahah<-getCDRC("AHAHOverallIndexDomain",geography = "postcode", geographyCode = c("L13AY","L82TJ","L83UL"))
class(ahah)
devtools::load_all()
devtools::load_all()
ahah<-getCDRC("AHAHOverallIndexDomain",geography = "postcode", geographyCode = c("L13AY","L82TJ","L83UL"))
class(ahah)
devtools::load_all()
ahah<-getCDRC("AHAHOverallIndexDomain",geography = "postcode", geographyCode = c("L13AY","L82TJ","L83UL"))
class(ahah)
ahah[order(ahah$ahah)]["postCode","ahah"]
ahah[order(ahah$ahah),c("postCode","ahah")]
liverpool=st_as_sf(liverpool)
iuc<-getCDRC("IUC2018",geography = "LSOA", geographyCode = liverpool$LSOA11CD, boundaries = TRUE)
plot(iuc$grpLabel)
plot(iuc$geometry)
ggplot2::ggplot()+
geom_sf(aes(fill=grpLabel, group=grpLabel),iuc,show.legend = T,color="NA")+theme_void()
ggplot2::ggplot()+
geom_sf(aes(fill=grpLabel, group=grpLabel),iuc,show.legend = T,color="NA")+theme_void()
??geom_sf
ggplot2::ggplot()+
ggplot2::geom_sf(aes(fill=grpLabel, group=grpLabel),iuc,show.legend = T,color="NA")+theme_void()
library(ggplot2)
ggplot()+
geom_sf(aes(fill=grpLabel, group=grpLabel),iuc,show.legend = T,color="NA")+theme_void()
ggplot()+
geom_sf(aes(fill=grpLabel, group=grpLabel),iuc,show.legend = T,color="NA")+theme_void()+labs(fill="IUC groups")
library(cdrcR)
loginCDRC(username = "patu",
password = "Favafava9!")
dataset_list<-listCDRC()
ahah<-getCDRC("AHAHOverallIndexDomain",geography = "postcode", geographyCode = c("L13AY","L82TJ","L83UL"))
use_gpl3_license()
devtools::use_gpl3_license()
??use_gpl3_license()
usethis::use_gpl3_license()
devtools::load_all()
loacInput<-getCDRC("LOACInputData2011",geography = "LSOA", geographyCode = "E01000001", boundaries = TRUE)
View(loacInput)
devtools::document()
?read.table
?write.table
?contains
?across
?contains
?across
?all_of
devtools::document()
devtools::load_all()
liverpool=st_as_sf(liverpool)
modum<-getCDRC("MODUMClassificationEW2016",geography = "LSOA", geographyCode = liverpool$LSOA11CD, boundaries = TRUE)
dataCode<-"MODUMClassificationEW2016"
geography = "LSOA"
geographyCode = liverpool$LSOA11CD
data_list<-listCDRC()
data_list<-dplyr::filter(data_list, grepl(dataCode, DataCode))
if(geography==data_list$GeographyLevel){same=TRUE}else{same=FALSE}
if(geography=="LSOA"){geography="lsoaCode"}
single_code<-FALSE
if(geography=="lsoaCode"){
geography<-"lsoaCodes"
}
url<-paste0("https://api.cdrc.ac.uk/v1/",
dataCode,
"/",
geography)
token<-paste0("Bearer ",Sys.getenv("CDRC_API_KEY"))
request_body_json <- rjson::toJSON(geographyCode)
call <- httr::POST(url,
body = request_body_json,
httr::accept("*/*"),
httr::add_headers(Authorization = token,.headers = c("Content-Type"="application/json")))
data<-httr::content(call,as = "text")
data<-jsonlite::fromJSON(data)
if(same){
data<-as.data.frame(rlist::list.rbind(data[[2]]))
}else{
colnames(data)[2]<-"dataCol"
data<-tidyr::unnest(data,dataCol)
}
View(data)
if(data_list$GeographyLevel =="LSOA"){
geocode<-"LSOA11CD"
geocode_<-"lsoa11"
geocode__<-"LSOA11CD"
}
if(data_list$GeographyLevel =="OA"){
geocode<-"OA11CD"
geocode_<-"outputArea"
geocode__<-"outputArea"
}
colName<-data %>%
dplyr::select(!tidyselect::ends_with("NM")) %>%
dplyr::select(tidyselect::contains(geocode)|tidyselect::contains(geocode_)|tidyselect::contains(geocode__)) %>% colnames()
data<-data %>%
dplyr::rename(!!geocode := colName) %>%
as.data.frame()
View(data)
if(any(duplicated(dplyr::select(data,!!geocode)))){
data<-data %>% dplyr::distinct(dplyr::across(tidyselect::all_of(geocode)),.keep_all = T) %>%
as.data.frame()
}
View(data)
request_body_json <- rjson::toJSON(geographyCode)
call <- httr::POST(url,
body = request_body_json,
httr::accept("*/*"),
httr::add_headers(Authorization = token,.headers = c("Content-Type"="application/json")))
data<-httr::content(call,as = "text")
data<-jsonlite::fromJSON(data)
View(data)
colnames(data)[2]<-"dataCol"
data<-tidyr::unnest(data,dataCol)
View(data)
data_list$GeographyLevel
if(data_list$GeographyLevel =="LSOA"){
geocode<-"LSOA11CD"
geocode_<-"lsoa11"
geocode__<-"LSOA11CD"
}
if(data_list$GeographyLevel =="OA"){
geocode<-"OA11CD"
geocode_<-"outputArea"
geocode__<-"outputArea"
}
colName<-data %>%
dplyr::select(!tidyselect::ends_with("NM")) %>%
dplyr::select(tidyselect::contains(geocode)|tidyselect::contains(geocode_)|tidyselect::contains(geocode__)) %>% colnames()
?contains
colName<-data %>%
dplyr::select(!tidyselect::ends_with("NM")) %>%
dplyr::select(!tidyselect::starts_with(init))%>%
dplyr::select(tidyselect::contains(geocode)|tidyselect::contains(geocode_)|tidyselect::contains(geocode__)) %>% colnames()
init<-"LS"
colName<-data %>%
dplyr::select(!tidyselect::ends_with("NM")) %>%
dplyr::select(!tidyselect::starts_with(init))%>%
dplyr::select(tidyselect::contains(geocode)|tidyselect::contains(geocode_)|tidyselect::contains(geocode__)) %>% colnames()
devtools::load_all()
modum<-getCDRC("MODUMClassificationEW2016",geography = "LSOA", geographyCode = liverpool$LSOA11CD, boundaries = TRUE)
data<-data %>%
dplyr::rename(!!geocode := tidyselect::all_of(colName)) %>%
as.data.frame()
View(data)
if(any(duplicated(dplyr::select(data,!!geocode)))){
data<-data %>% dplyr::distinct(dplyr::across(tidyselect::all_of(geocode)),.keep_all = T) %>%
as.data.frame()
}
geo<-data_list$GeographyLevel
if(geo =="LSOA"){
ogpURL<-"https://services1.arcgis.com/ESMARspQHYMw9BZ9/arcgis/rest/services/Lower_Layer_Super_Output_Areas_December_2011_Boundaries_EW_BFC_V2/FeatureServer/0/query"
geocode<-"LSOA11CD"
}
if(geo =="OA"){
ogpURL<-"https://services1.arcgis.com/ESMARspQHYMw9BZ9/arcgis/rest/services/Output_Areas_December_2011_Boundaries_EW_BGC/FeatureServer/0/query"
geocode<-"OA11CD"
}
cd<-data %>% dplyr::select(tidyselect::contains(geocode)) %>% as.data.frame()
if(geo =="OA"){
ogpURL<-"https://services1.arcgis.com/ESMARspQHYMw9BZ9/arcgis/rest/services/Output_Areas_December_2011_Boundaries_EW_BGC/FeatureServer/0/query"
geocode<-"OA11CD"
init<-"LS"
}
cd<-data %>%
dplyr::select(!tidyselect::starts_with(init)) %>%
dplyr::select(tidyselect::contains(geocode)) %>%
as.data.frame()
if(nrow(cd)==1){
whereClause<-urltools::url_encode(paste0("?where=",cd[,1]))
ogpURL<-paste0(ogpURL,whereClause,"&outFields=*&outSR=4326&f=json")
sf <- sf::st_read(ogpURL)
}else{
seq<-splitAt(cd[,1],50)
clause<-seq %>% purrr::map(~paste(.x,sep = "",collapse = "', '"))
clause<-clause %>% purrr::map(~paste0(geocode," IN ('",noquote(.x),"')"))
req <- clause %>% purrr::map(~ httr::POST(url = ogpURL,
body = list(where= .x,
outfields="*",
outSR = '4326',
f='json'),
.headers = c("application/x-www-form-urlencoded"))
)
sf <- req %>% purrr::map_df(~sf::read_sf(httr::content(.x,type='text',encoding='UTF-8')))
}
sf <- sf[c("geometry")]
data<-sf::st_as_sf(cbind(data,sf))
devtools::load_all()
modum<-getCDRC("MODUMClassificationEW2016",geography = "LSOA", geographyCode = liverpool$LSOA11CD, boundaries = TRUE)
ahah<-getCDRC("AHAHOverallIndexDomain",geography = "postcode", geographyCode = c("L13AY","L82TJ","L83UL"))
ahah<-getCDRC("AHAHOverallIndexDomain",geography = "postcode", geographyCode = c("L13AY","L82TJ","L83UL"), boundaries = TRUE)
ahah<-getCDRC("AHAHOverallIndexDomain",geography = "LSOA", geographyCode = liverpool$LSOA11CD, boundaries = T)
cow<-getCDRC("COWZUK2011",geography = "LSOA", geographyCode = liverpool$LSOA11CD, boundaries = T)
imd<-getCDRC("IMD2019",geography = "LSOA", geographyCode = sublsoa$LSOA11CD, boundaries = TRUE)
iuc<-getCDRC("IUC2018",geography = "LSOA", geographyCode = liverpool$LSOA11CD, boundaries = TRUE)
loac<-getCDRC("LOACClassification2011",geography = "LSOA", geographyCode = liverpool$LSOA11CD, boundaries = F)
loacInput<-getCDRC("LOACInputData2011",geography = "LSOA", geographyCode = "E01000001", boundaries = TRUE)
londonwpc<-getCDRC("LWZCClassification2017",geography = "LSOA", geographyCode = "E01000001", boundaries = T)
modum<-getCDRC("MODUMClassificationEW2016",geography = "LSOA", geographyCode = liverpool$LSOA11CD, boundaries = TRUE)
oaclass<-getCDRC("OAClassification2011",geography = "postcode", geographyCode = c("CH430UQ","LS61EF"), boundaries = TRUE)
loac<-getCDRC("LOACClassification2011",geography = "LSOA", geographyCode = liverpool$LSOA11CD, boundaries = F)
dataCode<-"LOACClassification2011"
geography = "LSOA"
geographyCode = liverpool$LSOA11CD
data_list<-listCDRC()
data_list<-dplyr::filter(data_list, grepl(dataCode, DataCode))
if(geography==data_list$GeographyLevel){same=TRUE}else{same=FALSE}
if(geography=="MSOA"){geography="msoaCode"}
if(geography=="LSOA"){geography="lsoaCode"}
if(geography=="postcode"){geography="postCode"}
if(length(geographyCode)==1){
url <- paste0("https://api.cdrc.ac.uk/v1/",
dataCode,
"/",
geography,
"=",
geographyCode)
single_code<-TRUE
}
else{
single_code<-FALSE
if(geography=="msoaCode"){
geography<-"msoaCodes"
}
if(geography=="lsoaCode"){
geography<-"lsoaCodes"
}
if(geography=="postCode"){
geography<-"postCodes"
}
url<-paste0("https://api.cdrc.ac.uk/v1/",
dataCode,
"/",
geography)
}
if(length(geographyCode)==1){
url <- paste0("https://api.cdrc.ac.uk/v1/",
dataCode,
"/",
geography,
"=",
geographyCode)
single_code<-TRUE
}else{
single_code<-FALSE
if(geography=="msoaCode"){
geography<-"msoaCodes"
}
if(geography=="lsoaCode"){
geography<-"lsoaCodes"
}
if(geography=="postCode"){
geography<-"postCodes"
}
url<-paste0("https://api.cdrc.ac.uk/v1/",
dataCode,
"/",
geography)
}
token<-paste0("Bearer ",Sys.getenv("CDRC_API_KEY"))
if (single_code){
call<-httr::GET(url,httr::add_headers(Authorization = token))
} else {
request_body_json <- rjson::toJSON(geographyCode)
call <- httr::POST(url,
body = request_body_json,
httr::accept("*/*"),
httr::add_headers(Authorization = token,.headers = c("Content-Type"="application/json")))
}
if(httr::http_error(call)){
if (call$status_code == 500){
message("The token is expired. Login again with CDRC_login() to generate a new one.")
}else{
message(httr::message_for_status(call,"get the data"))
}
stop()
}
if(httr::http_error(call)){
if (call$status_code == 500){
message("The token is expired. Login again with CDRC_login() to generate a new one.")
}else{
message(httr::message_for_status(call,"get the data"))
}
stop()
}else{
data<-httr::content(call,as = "text")
data<-jsonlite::fromJSON(data)
if(single_code==TRUE){
data<-as.data.frame(data[[2]])
}
else{
if(same){
data<-as.data.frame(rlist::list.rbind(data[[2]]))
}else{
colnames(data)[2]<-"dataCol"
data<-tidyr::unnest(data,dataCol)
}
}
if(data_list$GeographyLevel =="LSOA"){
geocode<-"LSOA11CD"
geocode_<-"lsoa11"
geocode__<-"LSOA11CD"
init<-"OA"
}
if(data_list$GeographyLevel =="OA"){
geocode<-"OA11CD"
geocode_<-"outputArea"
geocode__<-"outputArea"
init<-"LS"
}
if(data_list$GeographyLevel =="WZ"){
geocode<-"wz11cd"
geocode_<-"wzCode"
geocode__<-"workPlaceZone"
init<-"OA"
}
colName<-data %>%
dplyr::select(!tidyselect::ends_with("NM")) %>%
dplyr::select(!tidyselect::starts_with(init))%>%
dplyr::select(tidyselect::contains(geocode)|tidyselect::contains(geocode_)|tidyselect::contains(geocode__)) %>% colnames()
data<-data %>%
dplyr::rename(!!geocode := tidyselect::all_of(colName)) %>%
as.data.frame()
if(any(duplicated(dplyr::select(data,!!geocode)))){
data<-data %>% dplyr::distinct(dplyr::across(tidyselect::all_of(geocode)),.keep_all = T) %>%
as.data.frame()
}
}
View(data)
devtools::load_all()
loac<-getCDRC("LOACClassification2011",geography = "LSOA", geographyCode = liverpool$LSOA11CD, boundaries = F)
loacInput<-getCDRC("LOACInputData2011",geography = "LSOA", geographyCode = "E01000001", boundaries = TRUE)
loac<-getCDRC("LOACClassification2011",geography = "LSOA", geographyCode = "E01000001", boundaries = F)
devtools::load_all()
?loginCDRC
?getCDRC
devtools::load_all()
dataset_list<-listCDRC()
loginCDRC(username = "patu",
password = "Favafava9!")
dataset_list<-listCDRC()
View(dataset_list)
londonwpc<-getCDRC("LWZCClassification2017",geography = "LSOA", geographyCode = "E01000001", boundaries = T)
londonwpc<-getCDRC("LWZCClassification2017",geography = "postcode", geographyCode = "EC2Y5HN", boundaries = T)
londonwpc<-getCDRC("LWZCClassification2017",geography = "postcode", geographyCode = "EC2Y5HN", boundaries = F)
View(londonwpc)
dataCode<-"LWZCClassification2017"
geography<-"postcode"
geographyCode<-"EC2Y5HN"
data_list<-listCDRC()
if(!any(grepl(dataCode,data_list$DataCode)))stop("The dataCode is not in the list of available datasets. Check the list with `listCDRC()`.")
data_list<-dplyr::filter(data_list, grepl(dataCode, DataCode))
if(geography==data_list$GeographyLevel){same=TRUE}else{same=FALSE}
if(geography=="MSOA"){geography="msoaCode"}
if(geography=="LSOA"){geography="lsoaCode"}
if(geography=="postcode"){geography="postCode"}
if(length(geographyCode)==1){
url <- paste0("https://api.cdrc.ac.uk/v1/",
dataCode,
"/",
geography,
"=",
geographyCode)
single_code<-TRUE
}else{
single_code<-FALSE
if(geography=="msoaCode"){
geography<-"msoaCodes"
}
if(geography=="lsoaCode"){
geography<-"lsoaCodes"
}
if(geography=="postCode"){
geography<-"postCodes"
}
url<-paste0("https://api.cdrc.ac.uk/v1/",
dataCode,
"/",
geography)
}
token<-paste0("Bearer ",Sys.getenv("CDRC_API_KEY"))
if (single_code){
call<-httr::GET(url,httr::add_headers(Authorization = token))
} else {
request_body_json <- rjson::toJSON(geographyCode)
call <- httr::POST(url,
body = request_body_json,
httr::accept("*/*"),
httr::add_headers(Authorization = token,.headers = c("Content-Type"="application/json")))
}
if(httr::http_error(call)){
if (call$status_code == 500){
message("The token is expired. Login again with CDRC_login() to generate a new one.")
}else{
message(httr::message_for_status(call,"get the data"))
}
stop()
}else{
data<-httr::content(call,as = "text")
data<-jsonlite::fromJSON(data)
if(single_code==TRUE){
data<-as.data.frame(data[[2]])
}else{
if(same){
data<-as.data.frame(rlist::list.rbind(data[[2]]))
}else{
colnames(data)[2]<-"dataCol"
data<-tidyr::unnest(data,dataCol)
}
}
if(nrow(data)==0)stop("No data found. Check the data coverage with `listCDRC()`")
if(data_list$GeographyLevel =="LSOA"){
geocode<-"LSOA11CD"
geocode_<-"lsoa11"
geocode__<-"LSOA11CD"
init<-"OA"
}
if(data_list$GeographyLevel =="OA"){
geocode<-"OA11CD"
geocode_<-"outputArea"
geocode__<-"outputArea"
init<-"LS"
}
if(data_list$GeographyLevel =="WZ"){
geocode<-"wz11cd"
geocode_<-"wzCode"
geocode__<-"workPlaceZone"
init<-"OA"
}
colName<-data %>%
dplyr::select(!tidyselect::ends_with("NM")) %>%
dplyr::select(!tidyselect::starts_with(init))%>%
dplyr::select(tidyselect::contains(geocode)|tidyselect::contains(geocode_)|tidyselect::contains(geocode__)) %>% colnames()
data<-data %>%
dplyr::rename(!!geocode := tidyselect::all_of(colName)) %>%
as.data.frame()
if(any(duplicated(dplyr::select(data,!!geocode)))){
data<-data %>% dplyr::distinct(dplyr::across(tidyselect::all_of(geocode)),.keep_all = T) %>%
as.data.frame()
}
}
View(data)
data<-get_boundaries(data,data_list$GeographyLevel,single_code)
geo<-data_list$GeographyLevel
if(geo =="WZ"){
ogpURL<-"https://ons-inspire.esriuk.com/arcgis/rest/services/Census_Boundaries/Workplace_Zone_December_2011_Boundaries/MapServer/0/query"
geocode<-"wz11cd"
init<-"OA"
}
cd<-data %>%
dplyr::select(!tidyselect::starts_with(init)) %>%
dplyr::select(tidyselect::contains(geocode)) %>%
as.data.frame()
whereClause<-urltools::url_encode(paste0("?where=",cd[,1]))
nrow(cd)==1
ogpURL<-paste0(ogpURL,whereClause,"&outFields=*&outSR=4326&f=json")
sf <- sf::st_read(ogpURL)
View(data)
View(cd)
